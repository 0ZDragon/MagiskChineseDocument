import{_ as s,c as e,o as a,d as n}from"./app.f353d06f.js";const A=JSON.parse('{"title":"Developer Guides","description":"","frontmatter":{},"headers":[{"level":2,"title":"BusyBox","slug":"busybox","link":"#busybox","children":[]},{"level":2,"title":"Magisk Modules","slug":"magisk-modules","link":"#magisk-modules","children":[]},{"level":2,"title":"Magisk Module Installer","slug":"magisk-module-installer","link":"#magisk-module-installer","children":[]},{"level":2,"title":"Boot Scripts","slug":"boot-scripts","link":"#boot-scripts","children":[]},{"level":2,"title":"Root Directory Overlay System","slug":"root-directory-overlay-system","link":"#root-directory-overlay-system","children":[]}],"relativePath":"guides.md"}'),l={name:"guides.md"},o=n(`<h1 id="developer-guides" tabindex="-1">Developer Guides <a class="header-anchor" href="#developer-guides" aria-hidden="true">#</a></h1><h2 id="busybox" tabindex="-1">BusyBox <a class="header-anchor" href="#busybox" aria-hidden="true">#</a></h2><p>Magisk ships with a feature complete BusyBox binary (including full SELinux support). The executable is located at <code>/data/adb/magisk/busybox</code>. Magisk&#39;s BusyBox supports runtime toggle-able &quot;ASH Standalone Shell Mode&quot;. What this standalone mode means is that when running in the <code>ash</code> shell of BusyBox, every single command will directly use the applet within BusyBox, regardless of what is set as <code>PATH</code>. For example, commands like <code>ls</code>, <code>rm</code>, <code>chmod</code> will <strong>NOT</strong> use what is in <code>PATH</code> (in the case of Android by default it will be <code>/system/bin/ls</code>, <code>/system/bin/rm</code>, and <code>/system/bin/chmod</code> respectively), but will instead directly call internal BusyBox applets. This makes sure that scripts always run in a predictable environment and always have the full suite of commands no matter which Android version it is running on. To force a command <em>not</em> to use BusyBox, you have to call the executable with full paths.</p><p>Every single shell script running in the context of Magisk will be executed in BusyBox&#39;s <code>ash</code> shell with standalone mode enabled. For what is relevant to 3rd party developers, this includes all boot scripts and module installation scripts.</p><p>For those who want to use this &quot;Standalone Mode&quot; feature outside of Magisk, there are 2 ways to enable it:</p><ol><li>Set environment variable <code>ASH_STANDALONE</code> to <code>1</code><br>Example: <code>ASH_STANDALONE=1 /data/adb/magisk/busybox sh &lt;script&gt;</code></li><li>Toggle with command-line options:<br><code>/data/adb/magisk/busybox sh -o standalone &lt;script&gt;</code></li></ol><p>To make sure all subsequent <code>sh</code> shell executed also runs in standalone mode, option 1 is the preferred method (and this is what Magisk and the Magisk app internally use) as environment variables are inherited down to child processes.</p><h2 id="magisk-modules" tabindex="-1">Magisk Modules <a class="header-anchor" href="#magisk-modules" aria-hidden="true">#</a></h2><p>A Magisk module is a folder placed in <code>/data/adb/modules</code> with the structure below:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">/data/adb/modules</span></span>
<span class="line"><span style="color:#A6ACCD;">├── .</span></span>
<span class="line"><span style="color:#A6ACCD;">├── .</span></span>
<span class="line"><span style="color:#A6ACCD;">|</span></span>
<span class="line"><span style="color:#A6ACCD;">├── $MODID                  &lt;--- The folder is named with the ID of the module</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │      *** Module Identity ***</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── module.prop         &lt;--- This file stores the metadata of the module</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │      *** Main Contents ***</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── system              &lt;--- This folder will be mounted if skip_mount does not exist</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   ├── ...</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   ├── ...</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   └── ...</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── zygisk              &lt;--- This folder contains the module&#39;s Zygisk native libraries</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   ├── arm64-v8a.so</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   ├── armeabi-v7a.so</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   ├── x86.so</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   ├── x86_64.so</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   └── unloaded        &lt;--- If exists, the native libraries are incompatible</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │      *** Status Flags ***</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── skip_mount          &lt;--- If exists, Magisk will NOT mount your system folder</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── disable             &lt;--- If exists, the module will be disabled</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── remove              &lt;--- If exists, the module will be removed next reboot</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │      *** Optional Files ***</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── post-fs-data.sh     &lt;--- This script will be executed in post-fs-data</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── service.sh          &lt;--- This script will be executed in late_start service</span></span>
<span class="line"><span style="color:#A6ACCD;">|   ├── uninstall.sh        &lt;--- This script will be executed when Magisk removes your module</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── system.prop         &lt;--- Properties in this file will be loaded as system properties by resetprop</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── sepolicy.rule       &lt;--- Additional custom sepolicy rules</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │      *** Auto Generated, DO NOT MANUALLY CREATE OR MODIFY ***</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── vendor              &lt;--- A symlink to $MODID/system/vendor</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── product             &lt;--- A symlink to $MODID/system/product</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── system_ext          &lt;--- A symlink to $MODID/system/system_ext</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │      *** Any additional files / folders are allowed ***</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── ...</span></span>
<span class="line"><span style="color:#A6ACCD;">│   └── ...</span></span>
<span class="line"><span style="color:#A6ACCD;">|</span></span>
<span class="line"><span style="color:#A6ACCD;">├── another_module</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── .</span></span>
<span class="line"><span style="color:#A6ACCD;">│   └── .</span></span>
<span class="line"><span style="color:#A6ACCD;">├── .</span></span>
<span class="line"><span style="color:#A6ACCD;">├── .</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h4 id="module-prop" tabindex="-1">module.prop <a class="header-anchor" href="#module-prop" aria-hidden="true">#</a></h4><p>This is the <strong>strict</strong> format of <code>module.prop</code></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">id=&lt;string&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">name=&lt;string&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">version=&lt;string&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">versionCode=&lt;int&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">author=&lt;string&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">description=&lt;string&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">updateJson=&lt;url&gt; (optional)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><ul><li><code>id</code> has to match this regular expression: <code>^[a-zA-Z][a-zA-Z0-9._-]+$</code><br> ex: ✓ <code>a_module</code>, ✓ <code>a.module</code>, ✓ <code>module-101</code>, ✗ <code>a module</code>, ✗ <code>1_module</code>, ✗ <code>-a-module</code><br> This is the <strong>unique identifier</strong> of your module. You should not change it once published.</li><li><code>versionCode</code> has to be an <strong>integer</strong>. This is used to compare versions</li><li><code>updateJson</code> should point to a URL that downloads a JSON to provide info so the Magisk app can update the module.</li><li>Others that weren&#39;t mentioned above can be any <strong>single line</strong> string.</li><li>Make sure to use the <code>UNIX (LF)</code> line break type and not the <code>Windows (CR+LF)</code> or <code>Macintosh (CR)</code>.</li></ul><p>Update JSON format:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;version&quot;: string,</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;versionCode&quot;: int,</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;zipUrl&quot;: url,</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;changelog&quot;: url</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h4 id="shell-scripts-sh" tabindex="-1">Shell scripts (<code>*.sh</code>) <a class="header-anchor" href="#shell-scripts-sh" aria-hidden="true">#</a></h4><p>Please read the <a href="#boot-scripts">Boot Scripts</a> section to understand the difference between <code>post-fs-data.sh</code> and <code>service.sh</code>. For most module developers, <code>service.sh</code> should be good enough if you just need to run a boot script.</p><p>In all scripts of your module, please use <code>MODDIR=\${0%/*}</code> to get your module&#39;s base directory path; do <strong>NOT</strong> hardcode your module path in scripts. If Zygisk is enabled, the environment variable <code>ZYGISK_ENABLED</code> will be set to <code>1</code>.</p><h4 id="the-system-folder" tabindex="-1">The <code>system</code> folder <a class="header-anchor" href="#the-system-folder" aria-hidden="true">#</a></h4><p>All files you want to replace/inject should be placed in this folder. This folder will be recursively merged into the real <code>/system</code>; that is: existing files in the real <code>/system</code> will be replaced by the one in the module&#39;s <code>system</code>, and new files in the module&#39;s <code>system</code> will be added to the real <code>/system</code>.</p><p>If you place a file named <code>.replace</code> in any of the folders, instead of merging its contents, that folder will directly replace the one in the real system. This can be very handy for swapping out an entire folder.</p><p>If you want to replace files in <code>/vendor</code>, <code>/product</code>, or <code>/system_ext</code>, please place them under <code>system/vendor</code>, <code>system/product</code>, and <code>system/system_ext</code> respectively. Magisk will transparently handle whether these partitions are in a separate partition or not.</p><h4 id="zygisk" tabindex="-1">Zygisk <a class="header-anchor" href="#zygisk" aria-hidden="true">#</a></h4><p>Zygisk is a feature of Magisk that allows advanced module developers to run code directly in every Android applications&#39; processes before they are specialized and running. For more details about the Zygisk API and building a Zygisk module, please checkout the <a href="https://github.com/topjohnwu/zygisk-module-sample" target="_blank" rel="noreferrer">Zygisk Module Sample</a> project.</p><h4 id="system-prop" tabindex="-1">system.prop <a class="header-anchor" href="#system-prop" aria-hidden="true">#</a></h4><p>This file follows the same format as <code>build.prop</code>. Each line comprises of <code>[key]=[value]</code>.</p><h4 id="sepolicy-rule" tabindex="-1">sepolicy.rule <a class="header-anchor" href="#sepolicy-rule" aria-hidden="true">#</a></h4><p>If your module requires some additional sepolicy patches, please add those rules into this file. Each line in this file will be treated as a policy statement. For more details about how a policy statement is formatted, please check <a href="./tools.html#magiskpolicy">magiskpolicy</a>&#39;s documentation.</p><h2 id="magisk-module-installer" tabindex="-1">Magisk Module Installer <a class="header-anchor" href="#magisk-module-installer" aria-hidden="true">#</a></h2><p>A Magisk module installer is a Magisk module packaged in a zip file that can be flashed in the Magisk app or custom recoveries such as TWRP. The simplest Magisk module installer is just a Magisk module packed as a zip file, in addition to the following files:</p><ul><li><code>update-binary</code>: Download the latest <a href="https://github.com/topjohnwu/Magisk/blob/master/scripts/module_installer.sh" target="_blank" rel="noreferrer">module_installer.sh</a> and rename/copy that script as <code>update-binary</code></li><li><code>updater-script</code>: This file should only contain the string <code>#MAGISK</code></li></ul><p>The module installer script will setup the environment, extract the module files from the zip file to the correct location, then finalizes the installation process, which should be good enough for most simple Magisk modules.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">module.zip</span></span>
<span class="line"><span style="color:#A6ACCD;">│</span></span>
<span class="line"><span style="color:#A6ACCD;">├── META-INF</span></span>
<span class="line"><span style="color:#A6ACCD;">│   └── com</span></span>
<span class="line"><span style="color:#A6ACCD;">│       └── google</span></span>
<span class="line"><span style="color:#A6ACCD;">│           └── android</span></span>
<span class="line"><span style="color:#A6ACCD;">│               ├── update-binary      &lt;--- The module_installer.sh you downloaded</span></span>
<span class="line"><span style="color:#A6ACCD;">│               └── updater-script     &lt;--- Should only contain the string &quot;#MAGISK&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">│</span></span>
<span class="line"><span style="color:#A6ACCD;">├── customize.sh                       &lt;--- (Optional, more details later)</span></span>
<span class="line"><span style="color:#A6ACCD;">│                                           This script will be sourced by update-binary</span></span>
<span class="line"><span style="color:#A6ACCD;">├── ...</span></span>
<span class="line"><span style="color:#A6ACCD;">├── ...  /* The rest of module&#39;s files */</span></span>
<span class="line"><span style="color:#A6ACCD;">│</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h4 id="customization" tabindex="-1">Customization <a class="header-anchor" href="#customization" aria-hidden="true">#</a></h4><p>If you need to customize the module installation process, optionally you can create a script in the installer named <code>customize.sh</code>. This script will be <em>sourced</em> (not executed!) by the module installer script after all files are extracted and default permissions and secontext are applied. This is very useful if your module require additional setup based on the device ABI, or you need to set special permissions/secontext for some of your module files.</p><p>If you would like to fully control and customize the installation process, declare <code>SKIPUNZIP=1</code> in <code>customize.sh</code> to skip all default installation steps. By doing so, your <code>customize.sh</code> will be responsible to install everything by itself.</p><p>The <code>customize.sh</code> script runs in Magisk&#39;s BusyBox <code>ash</code> shell with &quot;Standalone Mode&quot; enabled. The following variables and functions are available:</p><h5 id="variables" tabindex="-1">Variables <a class="header-anchor" href="#variables" aria-hidden="true">#</a></h5><ul><li><code>MAGISK_VER</code> (string): the version string of current installed Magisk (e.g. <code>v20.0</code>)</li><li><code>MAGISK_VER_CODE</code> (int): the version code of current installed Magisk (e.g. <code>20000</code>)</li><li><code>BOOTMODE</code> (bool): <code>true</code> if the module is being installed in the Magisk app</li><li><code>MODPATH</code> (path): the path where your module files should be installed</li><li><code>TMPDIR</code> (path): a place where you can temporarily store files</li><li><code>ZIPFILE</code> (path): your module&#39;s installation zip</li><li><code>ARCH</code> (string): the CPU architecture of the device. Value is either <code>arm</code>, <code>arm64</code>, <code>x86</code>, or <code>x64</code></li><li><code>IS64BIT</code> (bool): <code>true</code> if <code>$ARCH</code> is either <code>arm64</code> or <code>x64</code></li><li><code>API</code> (int): the API level (Android version) of the device (e.g. <code>21</code> for Android 5.0)</li></ul><h5 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-hidden="true">#</a></h5><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">ui_print &lt;msg&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    print &lt;msg&gt; to console</span></span>
<span class="line"><span style="color:#A6ACCD;">    Avoid using &#39;echo&#39; as it will not display in custom recovery&#39;s console</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">abort &lt;msg&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    print error message &lt;msg&gt; to console and terminate the installation</span></span>
<span class="line"><span style="color:#A6ACCD;">    Avoid using &#39;exit&#39; as it will skip the termination cleanup steps</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">set_perm &lt;target&gt; &lt;owner&gt; &lt;group&gt; &lt;permission&gt; [context]</span></span>
<span class="line"><span style="color:#A6ACCD;">    if [context] is not set, the default is &quot;u:object_r:system_file:s0&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    this function is a shorthand for the following commands:</span></span>
<span class="line"><span style="color:#A6ACCD;">       chown owner.group target</span></span>
<span class="line"><span style="color:#A6ACCD;">       chmod permission target</span></span>
<span class="line"><span style="color:#A6ACCD;">       chcon context target</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">set_perm_recursive &lt;directory&gt; &lt;owner&gt; &lt;group&gt; &lt;dirpermission&gt; &lt;filepermission&gt; [context]</span></span>
<span class="line"><span style="color:#A6ACCD;">    if [context] is not set, the default is &quot;u:object_r:system_file:s0&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    for all files in &lt;directory&gt;, it will call:</span></span>
<span class="line"><span style="color:#A6ACCD;">       set_perm file owner group filepermission context</span></span>
<span class="line"><span style="color:#A6ACCD;">    for all directories in &lt;directory&gt; (including itself), it will call:</span></span>
<span class="line"><span style="color:#A6ACCD;">       set_perm dir owner group dirpermission context</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>For convenience, you can also declare a list of folders you want to replace in the variable name <code>REPLACE</code>. The module installer script will create the <code>.replace</code> file into the folders listed in <code>REPLACE</code>. For example:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">REPLACE=&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">/system/app/YouTube</span></span>
<span class="line"><span style="color:#A6ACCD;">/system/app/Bloatware</span></span>
<span class="line"><span style="color:#A6ACCD;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>The list above will result in the following files being created: <code>$MODPATH/system/app/YouTube/.replace</code> and <code>$MODPATH/system/app/Bloatware/.replace</code>.</p><h4 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-hidden="true">#</a></h4><ul><li>When your module is downloaded with the Magisk app, <code>update-binary</code> will be <strong>forcefully</strong> replaced with the latest <a href="https://github.com/topjohnwu/Magisk/blob/master/scripts/module_installer.sh" target="_blank" rel="noreferrer"><code>module_installer.sh</code></a>. <strong>DO NOT</strong> try to add any custom logic in <code>update-binary</code>.</li><li>Due to historical reasons, <strong>DO NOT</strong> add a file named <code>install.sh</code> in your module installer zip.</li><li><strong>DO NOT</strong> call <code>exit</code> at the end of <code>customize.sh</code>. The module installer script has to perform some cleanups before exiting.</li></ul><h2 id="boot-scripts" tabindex="-1">Boot Scripts <a class="header-anchor" href="#boot-scripts" aria-hidden="true">#</a></h2><p>In Magisk, you can run boot scripts in 2 different modes: <strong>post-fs-data</strong> and <strong>late_start service</strong> mode.</p><ul><li>post-fs-data mode <ul><li>This stage is BLOCKING. The boot process is paused before execution is done, or 10 seconds have passed.</li><li>Scripts run before any modules are mounted. This allows a module developer to dynamically adjust their modules before it gets mounted.</li><li>This stage happens before Zygote is started, which pretty much means everything in Android</li><li><strong>WARNING:</strong> using <code>setprop</code> will deadlock the boot process! Please use <code>resetprop -n &lt;prop_name&gt; &lt;prop_value&gt;</code> instead.</li><li><strong>Only run scripts in this mode if necessary.</strong></li></ul></li><li>late_start service mode <ul><li>This stage is NON-BLOCKING. Your script runs in parallel with the rest of the booting process.</li><li><strong>This is the recommended stage to run most scripts.</strong></li></ul></li></ul><p>In Magisk, there are also 2 kinds of scripts: <strong>general scripts</strong> and <strong>module scripts</strong>.</p><ul><li>General Scripts <ul><li>Placed in <code>/data/adb/post-fs-data.d</code> or <code>/data/adb/service.d</code></li><li>Only executed if the script is set as executable (<code>chmod +x script.sh</code>)</li><li>Scripts in <code>post-fs-data.d</code> runs in post-fs-data mode, and scripts in <code>service.d</code> runs in late_start service mode.</li><li>Modules should <strong>NOT</strong> add general scripts during installation</li></ul></li><li>Module Scripts <ul><li>Placed in the module&#39;s own folder</li><li>Only executed if the module is enabled</li><li><code>post-fs-data.sh</code> runs in post-fs-data mode, and <code>service.sh</code> runs in late_start service mode.</li></ul></li></ul><p>All boot scripts will run in Magisk&#39;s BusyBox <code>ash</code> shell with &quot;Standalone Mode&quot; enabled.</p><h2 id="root-directory-overlay-system" tabindex="-1">Root Directory Overlay System <a class="header-anchor" href="#root-directory-overlay-system" aria-hidden="true">#</a></h2><p>Since <code>/</code> is read-only on system-as-root devices, Magisk provides an overlay system to enable developers to replace files in rootdir or add new <code>*.rc</code> scripts. This feature is designed mostly for custom kernel developers.</p><p>Overlay files shall be placed in the <code>overlay.d</code> folder in boot image ramdisk, and they follow these rules:</p><ol><li>All <code>*.rc</code> files in <code>overlay.d</code> will be read and concatenated <strong>AFTER</strong> <code>init.rc</code></li><li>Existing files can be replaced by files located at the same relative path</li><li>Files that correspond to a non-existing file will be ignored</li></ol><p>To add additional files which you can refer to in your custom <code>*.rc</code> scripts, add them into <code>overlay.d/sbin</code>. The 3 rules above do not apply to anything in this folder; instead, they will be directly copied to Magisk&#39;s internal <code>tmpfs</code> directory (which used to always be <code>/sbin</code>).</p><p>Starting from Android 11, the <code>/sbin</code> folder may no longer exists, and in that scenario, Magisk randomly generates a different <code>tmpfs</code> folder each boot. Every occurrence of the pattern <code>\${MAGISKTMP}</code> in your <code>*.rc</code> scripts will be replaced with the Magisk <code>tmpfs</code> folder when <code>magiskinit</code> injects it into <code>init.rc</code>. On pre Android 11 devices, <code>\${MAGISKTMP}</code> will simply be replaced with <code>/sbin</code>, so <strong>NEVER</strong> hardcode <code>/sbin</code> in the <code>*.rc</code> scripts when referencing these additional files.</p><p>Here is an example of how to setup <code>overlay.d</code> with a custom <code>*.rc</code> script:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">ramdisk</span></span>
<span class="line"><span style="color:#A6ACCD;">│</span></span>
<span class="line"><span style="color:#A6ACCD;">├── overlay.d</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── sbin</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   ├── libfoo.ko      &lt;--- These 2 files will be copied</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   └── myscript.sh    &lt;--- into Magisk&#39;s tmpfs directory</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── custom.rc          &lt;--- This file will be injected into init.rc</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── res</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   └── random.png     &lt;--- This file will replace /res/random.png</span></span>
<span class="line"><span style="color:#A6ACCD;">│   └── new_file           &lt;--- This file will be ignored because</span></span>
<span class="line"><span style="color:#A6ACCD;">│                               /new_file does not exist</span></span>
<span class="line"><span style="color:#A6ACCD;">├── res</span></span>
<span class="line"><span style="color:#A6ACCD;">│   └── random.png         &lt;--- This file will be replaced by</span></span>
<span class="line"><span style="color:#A6ACCD;">│                               /overlay.d/res/random.png</span></span>
<span class="line"><span style="color:#A6ACCD;">├── ...</span></span>
<span class="line"><span style="color:#A6ACCD;">├── ...  /* The rest of initramfs files */</span></span>
<span class="line"><span style="color:#A6ACCD;">│</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Here is an example of the <code>custom.rc</code>:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;"># Use \${MAGISKTMP} to refer to Magisk&#39;s tmpfs directory</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">on early-init</span></span>
<span class="line"><span style="color:#A6ACCD;">    setprop sys.example.foo bar</span></span>
<span class="line"><span style="color:#A6ACCD;">    insmod \${MAGISKTMP}/libfoo.ko</span></span>
<span class="line"><span style="color:#A6ACCD;">    start myservice</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">service myservice \${MAGISKTMP}/myscript.sh</span></span>
<span class="line"><span style="color:#A6ACCD;">    oneshot</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div>`,63),t=[o];function i(p,c,r,d,h,u){return a(),e("div",null,t)}const m=s(l,[["render",i]]);export{A as __pageData,m as default};
