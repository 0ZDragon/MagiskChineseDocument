import{_ as s,c as e,o as a,a as n}from"./app.1dd0032b.js";const f=JSON.parse('{"title":"内部细节","description":"","frontmatter":{},"headers":[{"level":2,"title":"文档结构","slug":"文档结构","link":"#文档结构","children":[{"level":3,"title":"“Magisk tmpfs 目录”中的路径","slug":"magisk-tmpfs-目录-中的路径","link":"#magisk-tmpfs-目录-中的路径","children":[]},{"level":3,"title":"/data 中的路径","slug":"data-中的路径","link":"#data-中的路径","children":[]}]},{"level":2,"title":"Magisk引导过程","slug":"magisk引导过程","link":"#magisk引导过程","children":[{"level":3,"title":"预初始化（Pre-Init）","slug":"预初始化-pre-init","link":"#预初始化-pre-init","children":[]},{"level":3,"title":"解密后（post-fs-data）","slug":"解密后-post-fs-data","link":"#解密后-post-fs-data","children":[]},{"level":3,"title":"后期启动（late_start）","slug":"后期启动-late-start","link":"#后期启动-late-start","children":[]}]},{"level":2,"title":"重置属性（Resetprop）","slug":"重置属性-resetprop","link":"#重置属性-resetprop","children":[]},{"level":2,"title":"SELinux Policies","slug":"selinux-policies","link":"#selinux-policies","children":[]}],"relativePath":"details.md","lastUpdated":1672592264000}'),o={name:"details.md"},l=n(`<h1 id="内部细节" tabindex="-1">内部细节 <a class="header-anchor" href="#内部细节" aria-hidden="true">#</a></h1><h2 id="文档结构" tabindex="-1">文档结构 <a class="header-anchor" href="#文档结构" aria-hidden="true">#</a></h2><h3 id="magisk-tmpfs-目录-中的路径" tabindex="-1">“Magisk tmpfs 目录”中的路径 <a class="header-anchor" href="#magisk-tmpfs-目录-中的路径" aria-hidden="true">#</a></h3><p>Magisk 将安装一个 <code>tmpfs</code> 目录来存储一些临时数据。对于带有 <code>/sbin</code> 文件夹的设备，将选择该文件夹，因为它还将充当将二进制文件注入 <code>PATH</code> 的覆盖层。从 Android 11 开始，<code>/sbin</code> 文件夹可能不存在，因此 Magisk 将在 <code>/dev</code> 下随机创建一个文件夹，并将其用作基本文件夹。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 为了获得Magisk正在使用的当前基本文件夹，使用命令 \`magisk--path\`。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 二进制文件，如 magisk、magiskinit 和所有小程序的符号链接直接存储</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 在此路径中。这意味着当这是/sbin，这些二进制文件将直接在 PATH 中。</span></span>
<span class="line"><span style="color:#A6ACCD;">MAGISKBASE</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">magisk</span><span style="color:#C3E88D;"> --path</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Magisk 内部材料</span></span>
<span class="line"><span style="color:#A6ACCD;">MAGISKTMP</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">$MAGISKBASE</span><span style="color:#C3E88D;">/.magisk</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Magisk 的 BusyBox 目录。在此文件夹中存储 busybox 二进制文件和指向</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 其所有小程序的符号链接。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 不推荐使用此目录，请直接调用 /data/adb/magisk/busybox 并使用</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Busybox 的 ASH 独立模式。将来会删除此路径的创建。</span></span>
<span class="line"><span style="color:#A6ACCD;">$MAGISKTMP/busybox</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># /data/adb/modules 将挂载到此处。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 由于 nosuid 挂载标志，未使用原始文件夹。</span></span>
<span class="line"><span style="color:#A6ACCD;">$MAGISKTMP/modules</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 当前 Magisk 安装配置</span></span>
<span class="line"><span style="color:#A6ACCD;">$MAGISKTMP/config</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 分区映像</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 此路径中的每个目录都将装载其目录名的分区。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 例如 system，system_ext，vendor，data ...</span></span>
<span class="line"><span style="color:#A6ACCD;">$MAGISKTMP/mirror</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Magisk在内部创建用于挂载映像的 Block 设备。</span></span>
<span class="line"><span style="color:#A6ACCD;">$MAGISKTMP/block</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 根目录修补程序文件</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 在 system-as-root 的系统上，/不可写。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 所有预初始化补丁文件都存储在这里绑定挂载。</span></span>
<span class="line"><span style="color:#A6ACCD;">$MAGISKTMP/rootdir</span></span>
<span class="line"></span></code></pre></div><h3 id="data-中的路径" tabindex="-1"><code>/data</code> 中的路径 <a class="header-anchor" href="#data-中的路径" aria-hidden="true">#</a></h3><p>一些二进制文件和文件应存储在 <code>/data</code> 中的非易失性存储中。为了防止检测，所有东西都必须存储在 <code>/data</code> 中安全且不可检测的地方。选 <code>/data/adb</code> 文件夹是因为其具有以下优点：</p><ul><li>它是现代安卓系统上的一个现有文件夹，因此不能作为 Magisk 存在的标志。</li><li>文件夹的权限默认为 <code>700</code>，所有者为 <code>root</code>，因此非 root 进程无法以任何可能的方式进入、读取和写入文件夹。</li><li>文件夹 secontext 标记为 <code>u:object_r:adb_data_file:s0</code>，很少有进程有权与该 secontext 进行任何交互。</li><li>该文件夹位于<em>设备加密存储区</em>中，因此一旦数据正确装载到 FBE（File-Based Encryption，基于文件的加密）设备中，即可访问该文件夹。</li></ul><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">SECURE_DIR</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">/data/adb</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 存储常规 post-fs-data 脚本的文件夹</span></span>
<span class="line"><span style="color:#A6ACCD;">$SECURE_DIR/post-fs-data.d</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#存储常规 late_start 服务脚本的文件夹</span></span>
<span class="line"><span style="color:#A6ACCD;">$SECURE_DIR/service.d</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Magisk 模块</span></span>
<span class="line"><span style="color:#A6ACCD;">$SECURE_DIR/modules</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 等待升级的Magisk模块</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 模块文件在挂载时无法安全修改</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 通过 Magisk app 安装的模块将存储在此处并将在下次重新启动时</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 合并到 $SECURE_DIR/modules 中</span></span>
<span class="line"><span style="color:#A6ACCD;">$SECURE_DIR/modules_update</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 数据库存储设置和 Root 权限</span></span>
<span class="line"><span style="color:#A6ACCD;">MAGISKDB</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">$SECURE_DIR</span><span style="color:#C3E88D;">/magisk.db</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 所有与 magisk 相关的二进制文件，包括 busybox、脚本</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 和 magisk 二进制文件。用于支持模块安装、addon.d、 </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Magisk app 等。</span></span>
<span class="line"><span style="color:#A6ACCD;">DATABIN</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">$SECURE_DIR</span><span style="color:#C3E88D;">/magisk</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="magisk引导过程" tabindex="-1">Magisk引导过程 <a class="header-anchor" href="#magisk引导过程" aria-hidden="true">#</a></h2><h3 id="预初始化-pre-init" tabindex="-1">预初始化（Pre-Init） <a class="header-anchor" href="#预初始化-pre-init" aria-hidden="true">#</a></h3><p><code>magiskinit</code> 将替换 <code>init</code> 作为第一个运行的程序。</p><ul><li>挂载早期所需的分区。在已停产 system-as-root 设备上，我们将 root 切换到系统；在 2SI 设备上，我们修补原始的 <code>init</code> ，将第二阶段的 init 文件重定向到 magiskinit，并执行它为我们装载分区。</li><li>将 magisk 服务注入 <code>init.rc</code></li><li>在使用 monolithic 策略的设备上，从 <code>/sepolicy</code> 加载 sepolicy ；否则我们使用 FIFO 劫持 selinuxfs 中的节点，将 <code>LD_PRELOAD</code> 设置为钩住 <code>security_load_policy</code>，并在 2SI 设备上协助劫持，然后启动守护程序，等待 init 尝试加载 sepolicy。</li><li>修补 sepolicy 规则。如果我们使用“劫持”方法，将修补的 sepolicy 加载到内核中，取消阻止 init 并退出守护进程</li><li>执行原始的 <code>init</code> 以继续启动过程</li></ul><h3 id="解密后-post-fs-data" tabindex="-1">解密后（post-fs-data） <a class="header-anchor" href="#解密后-post-fs-data" aria-hidden="true">#</a></h3><p>当 <code>/data</code> 被解密和装载时会在 <code>post-fs-data</code> 上触发。守护程序 <code>magiskd</code> 将被启动，执行 post-fs-data 脚本，并神奇地安装模块文件。</p><h3 id="后期启动-late-start" tabindex="-1">后期启动（late_start） <a class="header-anchor" href="#后期启动-late-start" aria-hidden="true">#</a></h3><p>在稍后的引导过程中，将触发类 <code>late_start</code> ，并启动 Magisk “服务”模式。在此模式下，执行服务（service）脚本。</p><h2 id="重置属性-resetprop" tabindex="-1">重置属性（Resetprop） <a class="header-anchor" href="#重置属性-resetprop" aria-hidden="true">#</a></h2><p>通常，系统属性（properties）被设计为仅由 <code>init</code> 更新，并且对非 root 进程是只读的。使用 root，您可以通过使用诸如 <code>setprop</code> 之类的命令向 <code>property_service</code>（由 <code>init</code> 托管）发送请求来更改属性，但仍然禁止更改只读属性（以<code>ro.</code>开头的属性，如<code>ro.build.product</code>）和删除属性。</p><p><code>resetprop</code> is implemented by distilling out the source code related to system properties from AOSP and patched to allow direct modification to property area, or <code>prop_area</code>, bypassing the need to go through <code>property_service</code>. Since we are bypassing <code>property_service</code>, there are a few caveats:</p><ul><li><code>on property:foo=bar</code> actions registered in <code>*.rc</code> scripts will not be triggered if property changes does not go through <code>property_service</code>. The default set property behavior of <code>resetprop</code> matches <code>setprop</code>, which <strong>WILL</strong> trigger events (implemented by first deleting the property then set it via <code>property_service</code>). There is a flag <code>-n</code> to disable it if you need this special behavior.</li><li>persist properties (props that starts with <code>persist.</code>, like <code>persist.sys.usb.config</code>) are stored in both <code>prop_area</code> and <code>/data/property</code>. By default, deleting props will <strong>NOT</strong> remove it from persistent storage, meaning the property will be restored after the next reboot; reading props will <strong>NOT</strong> read from persistent storage, as this is the behavior of <code>getprop</code>. With the flag <code>-p</code>, deleting props will remove the prop in <strong>BOTH</strong> <code>prop_area</code> and <code>/data/property</code>, and reading props will be read from <strong>BOTH</strong> <code>prop_area</code> and persistent storage.</li></ul><h2 id="selinux-policies" tabindex="-1">SELinux Policies <a class="header-anchor" href="#selinux-policies" aria-hidden="true">#</a></h2><p>Magisk will patch the stock <code>sepolicy</code> to make sure root and Magisk operations can be done in a safe and secure way. The new domain <code>magisk</code> is effectively permissive, which is what <code>magiskd</code> and all root shell will run in. <code>magisk_file</code> is a new file type that is setup to be allowed to be accessed by every domain (unrestricted file context).</p><p>Before Android 8.0, all allowed su client domains are allowed to directly connect to <code>magiskd</code> and establish connection with the daemon to get a remote root shell. Magisk also have to relax some <code>ioctl</code> operations so root shells can function properly.</p><p>After Android 8.0, to reduce relaxation of rules in Android&#39;s sandbox, a new SELinux model is deployed. The <code>magisk</code> binary is labelled with <code>magisk_exec</code> file type, and processes running as allowed su client domains executing the <code>magisk</code> binary (this includes the <code>su</code> command) will transit to <code>magisk_client</code> by using a <code>type_transition</code> rule. Rules strictly restrict that only <code>magisk</code> domain processes are allowed to attribute files to <code>magisk_exec</code>. Direct connection to sockets of <code>magiskd</code> are not allowed; the only way to access the daemon is through a <code>magisk_client</code> process. These changes allow us to keep the sandbox intact, and keep Magisk specific rules separated from the rest of the policies.</p><p>The full set of rules can be found in <code>magiskpolicy/rules.cpp</code>.</p>`,26),t=[l];function i(p,c,r,d,y,h){return a(),e("div",null,t)}const m=s(o,[["render",i]]);export{f as __pageData,m as default};
